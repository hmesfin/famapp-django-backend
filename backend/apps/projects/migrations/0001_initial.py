# Generated by Django 5.1.12 on 2025-09-09 17:04

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public UUID for external API references and URLs')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Legacy UUID field - will be removed after migration to public_id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Soft delete flag - if True, record is considered deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='When this record was soft deleted', null=True)),
                ('name', models.CharField(help_text='The glorious name of your project', max_length=255)),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', max_length=255, unique=True)),
                ('description', models.TextField(help_text="What's this project all about?")),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('archived', 'Archived')], default='planning', help_text='Current state of the project', max_length=20)),
                ('start_date', models.DateField(help_text='When the fun begins')),
                ('end_date', models.DateField(blank=True, help_text='When we hope to finish (optional optimism)', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(help_text='The big boss of this project', on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
                'permissions': [('can_manage_team', 'Can manage project team'), ('can_archive_project', 'Can archive project')],
            },
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public UUID for external API references and URLs')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Legacy UUID field - will be removed after migration to public_id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('manager', 'Project Manager'), ('developer', 'Developer'), ('designer', 'Designer'), ('viewer', 'Viewer')], default='developer', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project Membership',
                'verbose_name_plural': 'Project Memberships',
                'ordering': ['role', 'joined_at'],
                'unique_together': {('project', 'user')},
            },
        ),
        migrations.AddField(
            model_name='project',
            name='team_members',
            field=models.ManyToManyField(help_text='The crew working on this', related_name='member_projects', through='projects.ProjectMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Sprint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public UUID for external API references and URLs')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Legacy UUID field - will be removed after migration to public_id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('name', models.CharField(help_text="Sprint name (e.g., 'Sprint 1', 'Alpha Release')", max_length=255)),
                ('goal', models.TextField(help_text='What are we trying to achieve this sprint?')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False, help_text='Only one sprint can be active per project')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprints', to='projects.project')),
            ],
            options={
                'verbose_name': 'Sprint',
                'verbose_name_plural': 'Sprints',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public UUID for external API references and URLs')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Legacy UUID field - will be removed after migration to public_id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Soft delete flag - if True, record is considered deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='When this record was soft deleted', null=True)),
                ('title', models.CharField(help_text='What needs to be done?', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the task')),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'In Review'), ('done', 'Done'), ('blocked', 'Blocked')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('story_points', models.IntegerField(default=1, help_text='Story points (1-21, Fibonacci style)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(21)])),
                ('due_date', models.DateTimeField(blank=True, help_text='When should this be done?', null=True)),
                ('assignee', models.ForeignKey(blank=True, help_text="Who's working on this?", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who soft deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.project')),
                ('sprint', models.ForeignKey(blank=True, help_text='Optional sprint assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='projects.sprint')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public UUID for external API references and URLs')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Legacy UUID field - will be removed after migration to public_id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this record was first created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated')),
                ('content', models.TextField()),
                ('edited', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='projects.comment')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='projects.task')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['created_at'],
            },
        ),
    ]
